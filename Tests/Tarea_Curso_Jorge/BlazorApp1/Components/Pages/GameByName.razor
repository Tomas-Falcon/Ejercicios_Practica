@page "/GameByName/{_nameText}"
@inject NavigationManager NavigationManager

<PageTitle>Juegos por nombre</PageTitle>

<h1>Juegos por nombre</h1>

@if (juegos == null)
{
    <p><em>Cargando, esperando por un nombre...</em></p>
}
else if (juegos.Count == 0)
{
    <p>Juego no encontrado.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Titulo</th>
                <th>Puntuacion</th>
                <th>Precio</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var juego in juegos)
            {
                <tr>
                    <td>@juego.Titulo</td>
                    <td>@juego.Puntuacion</td>
                    <td>@juego.Precio</td>
                </tr>
            }
        </tbody>
    </table>
}
<button class="btn btn-primary" @onclick="Regresar">Regresar</button>

@code {
    [Parameter]
    public string _nameText { get; set; }
    private List<Games> juegos;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(_nameText))
        {
            return;
        }

        try
        {
            var apiService = new ApiService(); // Suponiendo que ApiService es una clase válida
            juegos = await apiService.GetDataAsync("ExistGame", _nameText);
        }
        catch (Exception ex)
        {
            // Manejar el error de alguna manera, como mostrar un mensaje de error o registrar el error
            Console.WriteLine($"Error al obtener datos: {ex.Message}");
        }
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/");
    }
}
